// Generated by CoffeeScript 1.6.3
var EngineIoClient;

if (typeof require.exists === 'function') {
  EngineIoClient = require('engine.io');
} else {
  EngineIoClient = require('engine.io-client');
}

module.exports.create = function(config) {
  var local, _base;
  if (config == null) {
    config = {};
  }
  if (config.connect != null) {
    (_base = config.connect).interval || (_base.interval = 1000);
  }
  return local = {
    title: config.title != null ? config.title : 'Untitled',
    uuid: config.uuid != null ? config.uuid : void 0,
    context: config.context != null ? config.context : {},
    secret: config.secret != null ? config.secret : '',
    status: {
      value: 'pending',
      at: new Date
    },
    connect: function() {
      var socket;
      console.log('connect');
      if (local.socket != null) {
        return local.reconnect();
      }
      local.socket = socket = new EngineIoClient.Socket(config.connect.uri);
      socket.on('error', function(err) {
        console.log('error', err);
        if (local.status.value === 'pending') {
          return local.reconnect('connecting');
        }
      });
      socket.on('open', function() {
        console.log('open');
        local.status.value = 'connected';
        local.status.at = new Date;
        if (local.connecting != null) {
          clearInterval(local.connecting);
          delete local.connecting;
        }
        if (local.reconnecting != null) {
          clearInterval(local.reconnecting);
          return delete local.reconnecting;
        }
      });
      return socket.on('close', function() {
        console.log('close');
        if (local.status.value === 'denied') {
          return;
        }
        return local.reconnect('reconnecting');
      });
    },
    connecting: void 0,
    reconnecting: void 0,
    reconnect: function(type) {
      if (!(type === 'connecting' || type === 'reconnecting')) {
        return;
      }
      if (config.connect.interval < 1000) {
        return;
      }
      if (local[type] != null) {
        return;
      }
      return local[type] = setInterval((function() {
        console.log(type);
        return local.socket.open();
      }), config.connect.interval);
    }
  };
};
